<project xmlns="http://maven.apache.org/POM/4.0.0"
         xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://www.apache.org/xsd/maven-4.0.0.xsd">
    <modelVersion>4.0.0</modelVersion>

    <groupId>org.springframework.samples.petclinic.api</groupId>
    <artifactId>spring-petclinic-api-gateway</artifactId>
    <packaging>jar</packaging>
    <description>Spring PetClinic API Gateway</description>

    <parent>
        <groupId>org.springframework.samples</groupId>
        <artifactId>spring-petclinic-microservices</artifactId>
        <version>3.2.24</version>
    </parent>

    <properties>
        <webjars-bootstrap.version>3.3.7-1</webjars-bootstrap.version>
        <webjars-jquery.version>3.6.0</webjars-jquery.version>
        <webjars-angular.version>1.8.2</webjars-angular.version>
        <webjars-angular-ui-router.version>1.0.20</webjars-angular-ui-router.version>
        <wro4j.version>1.8.0</wro4j.version>
        <docker.image.exposed.port>8081</docker.image.exposed.port>
        <docker.image.dockerfile.dir>${basedir}/../docker</docker.image.dockerfile.dir>
        <dockerhub.username>davidunir945</dockerhub.username>
        <dockerhub.repository>spring-petclinic-api-gateway-test</dockerhub.repository>
        <dockerhub.password>dckr_pat_h4JdCXIoLpzBAPZcw_nAL-ne0Qc</dockerhub.password>
    </properties>

    <dependencies>
        <!-- Spring Boot -->
        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-devtools</artifactId>
            <optional>true</optional>
        </dependency>
        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-configuration-processor</artifactId>
            <optional>true</optional>
        </dependency>
        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-starter-actuator</artifactId>
        </dependency>
        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-starter-test</artifactId>
            <scope>test</scope>
        </dependency>

        <!-- Spring Cloud -->
        <dependency>
            <groupId>org.springframework.cloud</groupId>
            <artifactId>spring-cloud-starter-circuitbreaker-reactor-resilience4j</artifactId>
        </dependency>
        <dependency>
            <groupId>org.springframework.cloud</groupId>
            <artifactId>spring-cloud-starter-config</artifactId>
        </dependency>
        <dependency>
            <groupId>org.springframework.cloud</groupId>
            <artifactId>spring-cloud-starter-netflix-eureka-client</artifactId>
        </dependency>
        <dependency>
            <groupId>org.springframework.cloud</groupId>
            <artifactId>spring-cloud-starter-gateway</artifactId>
        </dependency>

        <!-- Third parties -->
        <dependency>
            <groupId>org.jolokia</groupId>
            <artifactId>jolokia-core</artifactId>
        </dependency>
        <dependency>
            <groupId>org.projectlombok</groupId>
            <artifactId>lombok</artifactId>
            <scope>provided</scope>
        </dependency>
        <dependency>
            <groupId>io.micrometer</groupId>
            <artifactId>micrometer-registry-prometheus</artifactId>
        </dependency>
        <dependency>
            <groupId>io.github.resilience4j</groupId>
            <artifactId>resilience4j-micrometer</artifactId>
        </dependency>
        <dependency>
            <groupId>io.opentelemetry</groupId>
            <artifactId>opentelemetry-exporter-zipkin</artifactId>
        </dependency>
        <dependency>
            <groupId>io.micrometer</groupId>
            <artifactId>micrometer-observation</artifactId>
        </dependency>
        <dependency>
            <groupId>io.micrometer</groupId>
            <artifactId>micrometer-tracing-bridge-brave</artifactId>
        </dependency>
        <dependency>
            <groupId>io.zipkin.reporter2</groupId>
            <artifactId>zipkin-reporter-brave</artifactId>
        </dependency>

        <!-- Webjars -->
        <dependency>
            <groupId>org.webjars</groupId>
            <artifactId>angularjs</artifactId>
            <version>${webjars-angular.version}</version>
        </dependency>
        <dependency>
            <groupId>org.webjars</groupId>
            <artifactId>jquery</artifactId>
            <version>${webjars-jquery.version}</version>
        </dependency>
        <dependency>
            <groupId>org.webjars</groupId>
            <artifactId>bootstrap</artifactId>
            <version>${webjars-bootstrap.version}</version>
        </dependency>
        <dependency>
            <groupId>org.webjars</groupId>
            <artifactId>angular-ui-router</artifactId>
            <version>${webjars-angular-ui-router.version}</version>
        </dependency>
        <dependency>
            <groupId>org.webjars</groupId>
            <artifactId>webjars-locator-core</artifactId>
        </dependency>

        <!-- Testing -->
        <dependency>
            <groupId>org.junit.jupiter</groupId>
            <artifactId>junit-jupiter-api</artifactId>
            <scope>test</scope>
        </dependency>
        <dependency>
            <groupId>org.junit.jupiter</groupId>
            <artifactId>junit-jupiter-engine</artifactId>
            <scope>test</scope>
        </dependency>
        <dependency>
            <groupId>com.squareup.okhttp3</groupId>
            <artifactId>mockwebserver</artifactId>
            <scope>test</scope>
        </dependency>
    </dependencies>
     <profiles>
        <profile>
            <id>buildDocker</id>
            <build>
                <plugins>
                    <plugin>
                        <groupId>org.codehaus.mojo</groupId>
                        <artifactId>exec-maven-plugin</artifactId>
                        <version>3.1.1</version>
                        <executions>
                            <execution>
                                <id>docker-build</id>
                                <phase>install</phase>
                                <goals>
                                    <goal>exec</goal>
                                </goals>
                                <configuration>
                                    <executable>${container.executable}</executable>
                                    <workingDirectory>${docker.image.dockerfile.dir}</workingDirectory>
                                    <arguments>
                                        <argument>build</argument>
                                        <argument>-f</argument>
                                        <argument>Dockerfile</argument>
                                        <argument>--build-arg</argument>
                                        <argument>ARTIFACT_NAME=${project.build.finalName}</argument>
                                        <argument>--build-arg</argument>
                                        <argument>EXPOSED_PORT=${docker.image.exposed.port}</argument>
                                        <argument>--platform</argument>
                                        <argument>${container.platform}</argument>
                                        <argument>${container.build.extraarg}</argument>
                                        <argument>-t</argument>
                                        <argument>${dockerhub.username}/${dockerhub.repository}:${project.version}</argument> <!-- Etiqueta correcta -->
                                        <argument>${project.build.directory}</argument>
                                    </arguments>
                                </configuration>
                            </execution>
                            <execution>
                                <id>docker-build-latest</id>
                                <phase>install</phase>
                                <goals>
                                    <goal>exec</goal>
                                </goals>
                                <configuration>
                                    <executable>${container.executable}</executable>
                                    <workingDirectory>${docker.image.dockerfile.dir}</workingDirectory>
                                    <arguments>
                                        <argument>build</argument>
                                        <argument>-f</argument>
                                        <argument>Dockerfile</argument>
                                        <argument>--build-arg</argument>
                                        <argument>ARTIFACT_NAME=${project.build.finalName}</argument>
                                        <argument>--build-arg</argument>
                                        <argument>EXPOSED_PORT=${docker.image.exposed.port}</argument>
                                        <argument>--platform</argument>
                                        <argument>${container.platform}</argument>
                                        <argument>${container.build.extraarg}</argument>
                                        <argument>-t</argument>
                                        <argument>${dockerhub.username}/${dockerhub.repository}:latest</argument> <!-- Nueva etiqueta -->
                                        <argument>${project.build.directory}</argument>
                                    </arguments>
                                </configuration>
                            </execution>
                            <execution>
                                <id>docker-login</id>
                                <phase>install</phase>
                                <goals>
                                    <goal>exec</goal>
                                </goals>
                                <configuration>
                                    <executable>${container.executable}</executable>
                                    <arguments>
                                        <argument>login</argument>
                                        <argument>-u</argument>
                                        <argument>${dockerhub.username}</argument>
                                        <argument>-p</argument>
                                        <argument>${dockerhub.password}</argument>
                                    </arguments>
                                </configuration>
                            </execution>
                            <execution>
                                <id>docker-push</id>
                                <phase>install</phase>
                                <goals>
                                    <goal>exec</goal>
                                </goals>
                                <configuration>
                                    <executable>${container.executable}</executable>
                                    <arguments>
                                        <argument>push</argument>
                                        <argument>${dockerhub.username}/${dockerhub.repository}:${project.version}</argument> <!-- Etiqueta correcta -->
                                    </arguments>
                                </configuration>
                            </execution>
                            <execution>
                                <id>docker-push-latest</id>
                                <phase>install</phase>
                                <goals>
                                    <goal>exec</goal>
                                </goals>
                                <configuration>
                                    <executable>${container.executable}</executable>
                                    <arguments>
                                        <argument>push</argument>
                                        <argument>${dockerhub.username}/${dockerhub.repository}:latest</argument> <!-- Etiqueta correcta -->
                                    </arguments>
                                </configuration>
                            </execution>
                        </executions>
                    </plugin>
                </plugins>
            </build>
        </profile>
    </profiles>
    <build>
        <plugins>
            <plugin>
                <groupId>ro.isdc.wro4j</groupId>
                <artifactId>wro4j-maven-plugin</artifactId>
                <version>${wro4j.version}</version>
                <executions>
                    <execution>
                        <phase>generate-resources</phase>
                        <goals>
                            <goal>run</goal>
                        </goals>
                    </execution>
                </executions>
                <configuration>
                    <wroManagerFactory>ro.isdc.wro.maven.plugin.manager.factory.ConfigurableWroManagerFactory</wroManagerFactory>
                    <cssDestinationFolder>${project.build.directory}/classes/static/css</cssDestinationFolder>
                    <wroFile>${basedir}/src/main/wro/wro.xml</wroFile>
                    <extraConfigFile>${basedir}/src/main/wro/wro.properties</extraConfigFile>
                    <contextFolder>${basedir}/src/main/less</contextFolder>
                </configuration>
                <dependencies>
                    <dependency>
                        <groupId>org.webjars</groupId>
                        <artifactId>bootstrap</artifactId>
                        <version>${webjars-bootstrap.version}</version>
                    </dependency>
                    <!-- Some tweak for wro4j 1.8 compatibility with Java 9+ -->
                    <!-- See https://github.com/wro4j/wro4j/issues/1039 -->
                    <dependency>
                        <groupId>org.mockito</groupId>
                        <artifactId>mockito-core</artifactId>
                        <version>${mockito.version}</version>
                    </dependency>
                </dependencies>
            </plugin>
<!--            <plugin>-->
<!--                <groupId>org.apache.maven.plugins</groupId>-->
<!--                <artifactId>maven-antrun-plugin</artifactId>-->
<!--                <version>3.1.0</version>-->
<!--                <executions>-->
<!--                    <execution>-->
<!--                        <id>copy-yaml-files</id>-->
<!--                        <phase>generate-resources</phase>-->
<!--                        <goals>-->
<!--                            <goal>run</goal>-->
<!--                        </goals>-->
<!--                        <configuration>-->
<!--                            <target>-->
<!--                                <copy todir="../k8s">-->
<!--                                    <fileset dir="../templates" includes="api-gateway-deployment.yaml"/>-->
<!--                                </copy>-->
<!--                            </target>-->
<!--                        </configuration>-->
<!--                    </execution>-->
<!--                </executions>-->
<!--            </plugin>-->
<!--            <plugin>-->
<!--                <groupId>com.google.code.maven-replacer-plugin</groupId>-->
<!--                <artifactId>replacer</artifactId>-->
<!--                <version>1.5.3</version>-->
<!--                <executions>-->
<!--                    <execution>-->
<!--                        <id>replace-yaml-tokens</id>-->
<!--                        <phase>prepare-package</phase>-->
<!--                        <goals>-->
<!--                            <goal>replace</goal>-->
<!--                        </goals>-->
<!--                    </execution>-->
<!--                </executions>-->
<!--                <configuration>-->
<!--                    <ignoreMissingFile>false</ignoreMissingFile>-->
<!--                    <file>../k8s/api-gateway-deployment.yaml</file>-->
<!--                    <replacements>-->
<!--                        <replacement>-->
<!--                            <token>%IMAGE_VERSION%</token>-->
<!--                            <value>${version}</value>-->
<!--                        </replacement>-->
<!--                    </replacements>-->
<!--                </configuration>-->
<!--            </plugin>-->
        </plugins>
    </build>
</project>
